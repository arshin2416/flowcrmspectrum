================================================================================
                    FLOWCRM SPECTRUM - FILE UPLOAD SYSTEM
                         COMPREHENSIVE DOCUMENTATION
================================================================================

OVERVIEW
========
This document details the complete file upload and management system implemented 
in FlowCRM Spectrum. The system provides robust file handling capabilities using 
the Apper SDK, including upload, validation, storage, and management features.

TABLE OF CONTENTS
================
1. System Architecture
2. Core Components
3. File Data Transformation
4. API Integration
5. Usage Examples
6. Configuration
7. Error Handling
8. Performance Considerations
9. Testing Guidelines
10. Future Enhancements

================================================================================
1. SYSTEM ARCHITECTURE
================================================================================

The file upload system consists of three main layers:

COMPONENT LAYER
- ApperFile.jsx: Main file upload component
- UI components for file display and management


API LAYER
- contactService.js: API integration for file operations
- Apper SDK integration for file upload

DATA FLOW
=========
User Action → Component State → Validation → Apper SDK → API → Database
     ↓              ↓              ↓            ↓        ↓        ↓
File Select → State Update → File Check → Upload → Store → Persist

================================================================================
2. CORE COMPONENTS
================================================================================

2.1 APPERFILE COMPONENT (src/components/molecules/File/ApperFile.jsx)
====================================================================

PURPOSE: Main file upload component using Apper SDK

KEY FEATURES:
- Multi-file upload with drag-and-drop
- Real-time upload progress tracking
- File validation (size, type, quantity)
- File removal and management
- Existing file display
- Error handling and user feedback

PROPS:
------
- label: Field label (default: "Files")
- initialFiles: Array of existing files
- onFilesChange: Callback when files change
- maxFiles: Maximum number of files (default: 50)
- maxFileSize: Maximum file size in bytes (default: 5GB)
- allowedTypes: Array of allowed file extensions
- isRequired: Whether field is required
- error: External error message
- disabled: Whether component is disabled

CONFIGURATION:
--------------
const clientConfig = {
    apperProjectId: "600c31700dfe4ae88009ac4c221f5d83",
    apperPublicKey: "123",
    apperBaseUrl: "https://api.apper.ai"
};

UPLOAD CONFIGURATION:
--------------------
const uploadConfig = {
    canvasUniqueId: '600c31700dfe4ae88009ac4c221f5d83',
    purpose: 'RecordAttachment',
    isExternal: false,
    allowMultiple: true,
    maxFiles: 50,
    autoUpload: true,
    showRestrictions: true
};


MAIN FUNCTIONS:
---------------

toUIFormat(apiFiles)
- Converts API format to UI format
- Handles missing fields gracefully
- Preserves original data for updates
- Returns: Array of UI-formatted file objects

toCreateFormat(uiFiles)
- Converts UI format to API format for new records
- Handles size conversion (bytes to KB)
- Returns: Array ready for API creation or null

toUpdateFormat(uiFiles, originalFiles)
- Converts UI format to API format for updates
- Preserves existing file IDs
- Handles both new and existing files
- Returns: Array ready for API update or null

mergeFiles(existingFiles, newFiles)
- Combines existing and new file arrays
- Prevents duplicate files
- Returns: Merged array of files

removeFile(files, fileId)
- Removes file from array by ID
- Returns: Updated file array

getFileIcon(fileType)
- Returns appropriate icon name for file type
- Supports: Images, PDFs, Videos, Audio, Documents, Archives
- Returns: Icon name string

formatFileSize(sizeInKB)
- Formats file size for human readability
- Converts KB to appropriate units (KB, MB, GB, TB)
- Returns: Formatted size string

convertBytesInKB(sizeInBytes)
- Converts bytes to kilobytes
- Returns: Size in KB

validateFile(file, options)
- Validates file size and type
- Options: maxSize, allowedTypes
- Returns: {isValid: boolean, errors: array}

================================================================================
3. FILE DATA TRANSFORMATION
================================================================================

3.1 API FORMAT (from backend)
=============================
{
  "Id": 12,
  "Name": "document.pdf",
  "Path": "attachments/319036/abc123/document.pdf",
  "Size": 458.51,
  "Type": "application/pdf",
  "IsExternal": false,
  "Ordinal": 1,
  "ParentRecordId": 3
}

3.2 UI FORMAT (for components)
==============================
{
  id: "api-file-12",
  name: "document.pdf",
  path: "attachments/319036/abc123/document.pdf",
  size: 458.51,
  type: "application/pdf",
  isExternal: false,
  ordinal: 1,
  _originalData: { /* original API data for updates */ }
}

3.3 CREATE FORMAT (for new files)
=================================
{
  "Name": "document.pdf",
  "Path": "attachments/319036/abc123/document.pdf",
  "Size": 458.51,
  "Type": "application/pdf",
  "IsExternal": false,
  "Ordinal": 1
}

3.4 UPDATE FORMAT (for existing files)
======================================
{
  "Id": 12,
  "ParentRecordId": 3,
  "Name": "document.pdf",
  "Path": "attachments/319036/abc123/document.pdf",
  "Size": 458.51,
  "Type": "application/pdf",
  "IsExternal": false,
  "Ordinal": 1
}

3.5 TRANSFORMATION RULES
========================
- API to UI: Add 'id' field, convert field names to camelCase
- UI to Create: Convert to PascalCase, convert size to KB, omit ID fields
- UI to Update: Include ID and ParentRecordId for existing files
- Size Conversion: Bytes → KB (divide by 1024)
- Ordinal Assignment: Sequential numbering starting from 1

================================================================================
4. API INTEGRATION
================================================================================

4.1 CONTACT SERVICE INTEGRATION
===============================

ENHANCED METHODS:
-----------------

getAll()
- Fetches contacts with file field: files_1_c
- Returns: Array of contacts with file data

getById(id)
- Fetches single contact with files
- Returns: Contact object with files_1_c array

create(contactData)
- Creates contact with files
- Uses: FileFieldUtils.toCreateFormat()
- Handles: File validation and upload

update(id, contactData)  
- Updates contact with files
- Uses: FileFieldUtils.toUpdateFormat()
- Preserves: Existing file IDs and relationships

FILE FIELD INTEGRATION:
-----------------------
// In create method
files_1_c: FileFieldUtils.toCreateFormat(contactData.files_1_c)

// In update method  
files_1_c: FileFieldUtils.toUpdateFormat(contactData.files_1_c, contactData.originalFiles1C)

// In fetch methods
{ field: { Name: "files_1_c" } }

4.2 APPER SDK INTEGRATION
=========================

INITIALIZATION:
---------------
const apperClient = new ApperClient({
    apperProjectId: import.meta.env.VITE_APPER_PROJECT_ID,
    apperPublicKey: import.meta.env.VITE_APPER_PUBLIC_KEY,
    apperBaseUrl: "https://api.apper.ai"
});

FILE UPLOADER:
--------------
await ApperFileUploader.showFileUploader('container-id', {
    title: 'Upload Files',
    allowMultiple: true,
    maxFiles: 50,
    maxFileSize: 5 * 1024 * 1024 * 1024, // 5GB
    allowedTypes: ['pdf', 'jpg', 'png', 'doc', 'docx'],
    autoUpload: true,
    existingFiles: currentFiles,
    uploadConfig: {
        canvasUniqueId: 'project-id',
        purpose: 'RecordAttachment',
        isExternal: false,
        apperClient: apperClient
    },
    onUploadedFilesChanged: (files) => {
        // Handle file state changes
    },
    onSuccess: (results) => {
        // Handle upload success
    },
    onError: (error) => {
        // Handle upload errors
    }
});

================================================================================
5. USAGE EXAMPLES
================================================================================

5.1 BASIC FILE UPLOAD COMPONENT
===============================
import ApperFile from '@/components/molecules/File/ApperFile';

<ApperFile
  label="Document Attachments"
  initialFiles={contact.files_1_c}
  onFilesChange={handleFilesChange}
  maxFiles={10}
  maxFileSize={50 * 1024 * 1024} // 50MB
  allowedTypes={['pdf', 'doc', 'docx', 'jpg', 'png']}
  isRequired={false}
/>

5.2 FILE CHANGE HANDLER
=======================
const handleFilesChange = useCallback((files) => {
    
    setTimeout(() => {
        setUploadedFiles(prevFiles => {
            const filesArray = Array.isArray(files) ? files : [];
            
            if (JSON.stringify(prevFiles) !== JSON.stringify(filesArray)) {
                return filesArray;
            }
            return prevFiles;
        });
    }, 0);
}, []);

5.3 FORM INTEGRATION
====================
// In form submission
const handleSubmit = async (formData) => {
    const contactData = {
        ...formData,
        files_1_c: uploadedFiles // Will be transformed by contactService
    };
    
    try {
        const result = await contactService.create(contactData);
    } catch (error) {
        console.error('Error creating contact:', error);
    }
};

5.4 UPDATE WITH EXISTING FILES
==============================
// Load existing files
const loadContact = async (id) => {
    const contact = await contactService.getById(id);
    
    // Convert to UI format for editing
    const uiFiles = FileFieldUtils.toUIFormat(contact.files_1_c);
    setUploadedFiles(uiFiles);
    setOriginalFiles1C(contact.files_1_c); // Store for updates
};

// Update with preserved file IDs
const updateContact = async (id, formData) => {
    const contactData = {
        ...formData,
        files_1_c: uploadedFiles,
        originalFiles1C: originalFiles1C // For proper ID preservation
    };
    
    const result = await contactService.update(id, contactData);
};

================================================================================
6. CONFIGURATION
================================================================================

6.1 ENVIRONMENT VARIABLES
=========================
VITE_APPER_PROJECT_ID=your_project_id_here
VITE_APPER_PUBLIC_KEY=your_public_key_here

6.2 FILE RESTRICTIONS
=====================
DEFAULT_MAX_FILES = 50
DEFAULT_MAX_FILE_SIZE = 5 * 1024 * 1024 * 1024 // 5GB
DEFAULT_ALLOWED_TYPES = ['pdf', 'jpg', 'png', 'doc', 'docx']

6.3 APPER CONFIGURATION
=======================
Project ID: "600c31700dfe4ae88009ac4c221f5d83"
Public Key: "123" 
Base URL: "https://api.apper.ai"
Purpose: "RecordAttachment"
Upload Mode: Internal (isExternal: false)

6.4 COMPONENT STYLING
=====================
Container: min-h-[200px] border-2 border-dashed border-slate-300 rounded-lg
Loading: Spinner with blue theme
Error: Red background with AlertCircle icon
Success: Green theme for completed uploads

================================================================================
7. ERROR HANDLING
================================================================================

7.1 FILE VALIDATION ERRORS
===========================
- File size exceeds limit
- File type not allowed
- Too many files selected
- Corrupted file upload

ERROR MESSAGES:
- "File size (X MB) exceeds maximum allowed size (Y MB)"
- "File type 'xyz' is not allowed. Allowed types: pdf, jpg, png"
- "Maximum 50 files allowed"

7.2 UPLOAD ERRORS
=================
- Network connection failure
- Apper SDK initialization failure
- API authentication errors
- Server storage errors

ERROR HANDLING:
try {
    await ApperFileUploader.showFileUploader(config);
} catch (error) {
    console.error('Upload failed:', error);
    setUploaderError(`Failed to upload: ${error.message}`);
}

7.3 API ERRORS
==============
- Invalid file field data
- Database constraint violations
- File storage service unavailable
- Record update conflicts

GRACEFUL DEGRADATION:
- Show user-friendly error messages
- Preserve partial upload progress
- Allow retry mechanisms
- Maintain form state on errors

================================================================================
8. PERFORMANCE CONSIDERATIONS
================================================================================

8.1 STATE MANAGEMENT
====================
- Use setTimeout to prevent setState during render
- Implement proper comparison to avoid unnecessary re-renders
- Memoize callbacks with useCallback
- Debounce file change handlers

OPTIMIZED STATE UPDATE:
setTimeout(() => {
    setUploadedFiles(prevFiles => {
        if (JSON.stringify(prevFiles) !== JSON.stringify(files)) {
            return files;
        }
        return prevFiles;
    });
}, 0);

8.2 FILE HANDLING
=================
- Lazy load file preview components
- Implement file compression for large images
- Use chunked upload for very large files
- Cache file metadata to reduce API calls

8.3 MEMORY MANAGEMENT
=====================
- Clean up file upload containers on unmount
- Release file object references after upload
- Implement proper error boundary components
- Monitor memory usage with large file sets

8.4 NETWORK OPTIMIZATION
========================
- Batch multiple file operations
- Implement retry logic for failed uploads
- Use proper HTTP status code handling
- Compress API request payloads when possible

================================================================================
9. TESTING GUIDELINES
================================================================================

9.1 UNIT TESTING
================
TEST CASES FOR FileFieldUtils:

✓ toUIFormat converts API format correctly
✓ toCreateFormat handles empty arrays
✓ toUpdateFormat preserves existing IDs
✓ mergeFiles prevents duplicates
✓ removeFile removes correct file
✓ getFileIcon returns correct icons
✓ formatFileSize formats correctly
✓ validateFile catches size/type violations

9.2 COMPONENT TESTING
=====================
TEST CASES FOR ApperFile:

✓ Renders with proper initial state
✓ Handles file selection correctly
✓ Shows upload progress indicators
✓ Displays error messages properly
✓ Calls onFilesChange callback
✓ Validates file constraints
✓ Handles file removal
✓ Works with existing files

9.3 INTEGRATION TESTING
=======================
TEST SCENARIOS:

✓ End-to-end file upload flow
✓ Contact creation with files
✓ Contact update preserving files
✓ Error recovery and retry
✓ Large file upload handling
✓ Multiple file type support
✓ Form validation with files
✓ API error handling

9.4 PERFORMANCE TESTING
=======================
METRICS TO MONITOR:

- Upload time for various file sizes
- Memory usage during bulk uploads
- Component render performance
- API response times
- Error recovery time
- User interaction responsiveness

================================================================================
10. FUTURE ENHANCEMENTS
================================================================================

10.1 PLANNED FEATURES
=====================
- File preview functionality (images, PDFs)
- Drag and drop interface improvements
- Bulk file operations (select all, delete all)
- File version history tracking
- Advanced file search and filtering
- Real-time collaborative file editing
- File sharing and permissions
- Automated file backup and sync

10.2 TECHNICAL IMPROVEMENTS
===========================
- Progressive file loading for large lists
- Virtual scrolling for file galleries
- WebSocket-based real-time updates
- Advanced caching strategies
- File thumbnail generation
- OCR text extraction for searchability
- Virus scanning integration
- Cloud storage provider integration

10.3 UI/UX ENHANCEMENTS
=======================
- Enhanced file preview modal
- Better progress indicators
- Improved error messaging
- Accessibility improvements
- Mobile-responsive design
- Dark mode support
- Customizable file list views
- Advanced sorting and filtering

10.4 SECURITY ENHANCEMENTS
==========================
- File content validation
- Malware scanning
- Enhanced access controls
- Audit logging for file operations
- Encryption for sensitive files
- Secure file sharing links
- Content security policies
- Rate limiting for uploads

================================================================================
CONCLUSION
================================================================================

The FlowCRM Spectrum file upload system provides a comprehensive, robust solution 
for file management within the application. Built on the Apper SDK, it offers:

✓ Complete file lifecycle management (upload, store, display, delete)
✓ Robust validation and error handling
✓ Seamless API integration with proper data transformation
✓ Performance-optimized state management
✓ Extensible architecture for future enhancements
✓ Comprehensive documentation and testing guidelines

The system is production-ready and provides a solid foundation for file 
management features across the entire FlowCRM Spectrum application.

================================================================================
TECHNICAL SUPPORT
================================================================================

For technical issues or questions:
1. Check console logs for detailed error messages
2. Verify Apper SDK configuration and API keys
3. Test file upload with different file types and sizes
4. Monitor network requests for API errors
5. Use React DevTools to inspect component state

Common troubleshooting steps:
- Restart development server
- Clear browser cache and localStorage
- Check network connectivity
- Verify environment variables
- Test with different browsers

================================================================================
